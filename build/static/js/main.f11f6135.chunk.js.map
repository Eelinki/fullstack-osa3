{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","Axios","get","then","response","data","newObject","post","id","put","delete","Filter","props","onChange","handleSearchChange","PersonForm","onSubmit","addNumber","value","newName","handleNameChange","newNumber","handleNumberChange","type","Persons","filteredPersons","map","person","i","key","name","number","onClick","e","deleteNumber","Notification","message","className","App","useState","persons","setPersons","setNewName","setNewNumber","searchQuery","setSearchQuery","notificationMessage","setNotificationMessage","notificationType","setNotificationType","useEffect","personsService","initialPersons","length","filter","toLowerCase","includes","target","preventDefault","personObject","resultFound","find","undefined","window","confirm","returnedPerson","p","setTimeout","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f11f6135.chunk.js","sourcesContent":["import Axios from \"axios\"\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = Axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = Axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = Axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deleteItem = (id) => {\r\n  const request = Axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteItem }","import React, { useState, useEffect } from 'react'\nimport personsService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchQuery, setSearchQuery ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState('success')\n\n  useEffect(() => {\n    personsService.getAll().then(initialPersons => {\n      setPersons(initialPersons)\n    })\n  }, [])\n\n  const addNumber = (e) => {\n    e.preventDefault()\n\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n\n    const resultFound = persons.find((person) => person.name === newName)\n\n    if(resultFound !== undefined) {\n      if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        personsService.update(resultFound.id, personObject).then(returnedPerson => {\n          setPersons(persons.map(p => p.id !== resultFound.id ? p : returnedPerson))\n          setNewName('')\n          setNewNumber('')\n\n          setNotificationType('success')\n          setNotificationMessage(\n            `Information of ${returnedPerson.name} updated successfully`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        }).catch(error => {\n          setPersons(persons.filter(p => p.id !== resultFound.id))\n\n          setNotificationType('error')\n          setNotificationMessage(\n            `Information of ${newName} has already been deleted from server`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        })\n      }\n    } else {\n      personsService.create(personObject).then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        setNewName('')\n        setNewNumber('')\n\n        setNotificationType('success')\n        setNotificationMessage(\n          `Added ${returnedPerson.name}`\n        )\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n      })\n    }\n  }\n\n  const deleteNumber = (e, person) => {\n    if(window.confirm(`Delete ${person.name} ?`)) {\n      personsService.deleteItem(person.id).then(returnedPerson => {\n        setPersons(persons.filter(p => p.id !== person.id))\n\n        setNotificationType('success')\n        setNotificationMessage(\n          `Deleted ${person.name}`\n        )\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n      }).catch(error => {\n        setPersons(persons.filter(p => p.id !== person.id))\n\n        setNotificationType('error')\n        setNotificationMessage(\n          `Information of ${person.name} has already been deleted from server`\n        )\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n      })\n    }\n  }\n\n  const handleNameChange = (e) => {\n    setNewName(e.target.value)\n  }\n\n  const handleNumberChange = (e) => {\n    setNewNumber(e.target.value)\n  }\n\n  const handleSearchChange = (e) => {\n    setSearchQuery(e.target.value)\n  }\n\n  const filteredPersons = searchQuery.length > 0\n    ? persons.filter(person => person.name.toLowerCase().includes(searchQuery.toLowerCase()))\n    : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} type={notificationType} />\n\n      <Filter handleSearchChange={handleSearchChange} />\n\n      <h2>add a new</h2>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        addNumber={addNumber}\n        handleNameChange={handleNameChange}\n        handleNumberChange={handleNumberChange}\n      />\n\n      <h2>Numbers</h2>\n      <Persons filteredPersons={filteredPersons} deleteNumber={deleteNumber} />\n    </div>\n  )\n}\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with <input onChange={props.handleSearchChange} />\n    </div>\n  )\n}\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.addNumber}>\n      <div>\n        name: <input value={props.newName} onChange={props.handleNameChange} />\n      </div>\n      <div>\n        number: <input value={props.newNumber} onChange={props.handleNumberChange} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = (props) => {\n  return (\n    <div>\n    {\n      props.filteredPersons.map((person, i) =>\n        <p key={person.name}>{person.name} {person.number}\n          <button onClick={(e) => props.deleteNumber(e, person)}>delete</button>\n        </p>)\n    }\n    </div>\n  )\n}\n\nconst Notification = ({message, type}) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}